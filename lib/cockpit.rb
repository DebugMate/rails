require "cockpit/version"
require "cockpit/railtie"
require "cockpit/handler"

require "net/http"

module Cockpit
  class ExceptionHandler
    mattr_reader :last_executed_binds
    mattr_accessor :last_executed_query

    @@last_executed_query = ""
    @@last_executed_binds = {}

    def initialize(app)
        @app = app
    end

    def call(env)
        @app.call(env)
    rescue StandardError => raised
        Handler.new(env, raised).capture if COCKPIT_CONFIG['data']['enabled'] === true
        raise
    end

    def self.send_test
        puts "Please check that you have your initializer defined with the COCKPIT_CONFIG constant" unless defined? COCKPIT_CONFIG
        raise TestException
    rescue StandardError => raised
        response = Handler.new({'REQUEST_METHOD' => "GET"}, raised).capture if COCKPIT_CONFIG['data']['enabled'] === true
        puts "We couldn't reach Cockpit Server at #{COCKPIT_CONFIG['data']['domain']}" unless response.is_a? Net::HTTPSuccess
        puts "Cockpit reached successfully. We sent a test Exception that has been registered." if response.is_a? Net::HTTPSuccess
    end

    def self.last_executed_binds=(binds)
      if binds.is_a? Array
        binds.each do |bind|
          name = bind.name
          value = bind.value
          @@last_executed_binds[name] = value
        end
      end
    end

  end

  class TestException < StandardError
    def message
        "Test generated by the cockpit:test rails command"
    end
  end
end
